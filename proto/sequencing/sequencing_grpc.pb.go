// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: sequencing.proto

package sequencing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SequencerInput_SubmitRollupTransaction_FullMethodName = "/sequencing.SequencerInput/SubmitRollupTransaction"
)

// SequencerInputClient is the client API for SequencerInput service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SequencerInputClient interface {
	// SubmitRollupTransaction ...
	SubmitRollupTransaction(ctx context.Context, in *SubmitRollupTransactionRequest, opts ...grpc.CallOption) (*SubmitRollupTransactionResponse, error)
}

type sequencerInputClient struct {
	cc grpc.ClientConnInterface
}

func NewSequencerInputClient(cc grpc.ClientConnInterface) SequencerInputClient {
	return &sequencerInputClient{cc}
}

func (c *sequencerInputClient) SubmitRollupTransaction(ctx context.Context, in *SubmitRollupTransactionRequest, opts ...grpc.CallOption) (*SubmitRollupTransactionResponse, error) {
	out := new(SubmitRollupTransactionResponse)
	err := c.cc.Invoke(ctx, SequencerInput_SubmitRollupTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SequencerInputServer is the server API for SequencerInput service.
// All implementations must embed UnimplementedSequencerInputServer
// for forward compatibility
type SequencerInputServer interface {
	// SubmitRollupTransaction ...
	SubmitRollupTransaction(context.Context, *SubmitRollupTransactionRequest) (*SubmitRollupTransactionResponse, error)
	mustEmbedUnimplementedSequencerInputServer()
}

// UnimplementedSequencerInputServer must be embedded to have forward compatible implementations.
type UnimplementedSequencerInputServer struct {
}

func (UnimplementedSequencerInputServer) SubmitRollupTransaction(context.Context, *SubmitRollupTransactionRequest) (*SubmitRollupTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitRollupTransaction not implemented")
}
func (UnimplementedSequencerInputServer) mustEmbedUnimplementedSequencerInputServer() {}

// UnsafeSequencerInputServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SequencerInputServer will
// result in compilation errors.
type UnsafeSequencerInputServer interface {
	mustEmbedUnimplementedSequencerInputServer()
}

func RegisterSequencerInputServer(s grpc.ServiceRegistrar, srv SequencerInputServer) {
	s.RegisterService(&SequencerInput_ServiceDesc, srv)
}

func _SequencerInput_SubmitRollupTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitRollupTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerInputServer).SubmitRollupTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerInput_SubmitRollupTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerInputServer).SubmitRollupTransaction(ctx, req.(*SubmitRollupTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SequencerInput_ServiceDesc is the grpc.ServiceDesc for SequencerInput service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SequencerInput_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sequencing.SequencerInput",
	HandlerType: (*SequencerInputServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitRollupTransaction",
			Handler:    _SequencerInput_SubmitRollupTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sequencing.proto",
}

const (
	SequencerOutput_GetNextBatch_FullMethodName = "/sequencing.SequencerOutput/GetNextBatch"
)

// SequencerOutputClient is the client API for SequencerOutput service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SequencerOutputClient interface {
	// SubmitRollupTransaction ...
	GetNextBatch(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Batch, error)
}

type sequencerOutputClient struct {
	cc grpc.ClientConnInterface
}

func NewSequencerOutputClient(cc grpc.ClientConnInterface) SequencerOutputClient {
	return &sequencerOutputClient{cc}
}

func (c *sequencerOutputClient) GetNextBatch(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Batch, error) {
	out := new(Batch)
	err := c.cc.Invoke(ctx, SequencerOutput_GetNextBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SequencerOutputServer is the server API for SequencerOutput service.
// All implementations must embed UnimplementedSequencerOutputServer
// for forward compatibility
type SequencerOutputServer interface {
	// SubmitRollupTransaction ...
	GetNextBatch(context.Context, *Batch) (*Batch, error)
	mustEmbedUnimplementedSequencerOutputServer()
}

// UnimplementedSequencerOutputServer must be embedded to have forward compatible implementations.
type UnimplementedSequencerOutputServer struct {
}

func (UnimplementedSequencerOutputServer) GetNextBatch(context.Context, *Batch) (*Batch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextBatch not implemented")
}
func (UnimplementedSequencerOutputServer) mustEmbedUnimplementedSequencerOutputServer() {}

// UnsafeSequencerOutputServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SequencerOutputServer will
// result in compilation errors.
type UnsafeSequencerOutputServer interface {
	mustEmbedUnimplementedSequencerOutputServer()
}

func RegisterSequencerOutputServer(s grpc.ServiceRegistrar, srv SequencerOutputServer) {
	s.RegisterService(&SequencerOutput_ServiceDesc, srv)
}

func _SequencerOutput_GetNextBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Batch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerOutputServer).GetNextBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerOutput_GetNextBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerOutputServer).GetNextBatch(ctx, req.(*Batch))
	}
	return interceptor(ctx, in, info, handler)
}

// SequencerOutput_ServiceDesc is the grpc.ServiceDesc for SequencerOutput service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SequencerOutput_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sequencing.SequencerOutput",
	HandlerType: (*SequencerOutputServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNextBatch",
			Handler:    _SequencerOutput_GetNextBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sequencing.proto",
}

const (
	BatchVerifier_VerifyBatch_FullMethodName = "/sequencing.BatchVerifier/VerifyBatch"
)

// BatchVerifierClient is the client API for BatchVerifier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BatchVerifierClient interface {
	// VerifyBatch ...
	VerifyBatch(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*VerificationResponse, error)
}

type batchVerifierClient struct {
	cc grpc.ClientConnInterface
}

func NewBatchVerifierClient(cc grpc.ClientConnInterface) BatchVerifierClient {
	return &batchVerifierClient{cc}
}

func (c *batchVerifierClient) VerifyBatch(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*VerificationResponse, error) {
	out := new(VerificationResponse)
	err := c.cc.Invoke(ctx, BatchVerifier_VerifyBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BatchVerifierServer is the server API for BatchVerifier service.
// All implementations must embed UnimplementedBatchVerifierServer
// for forward compatibility
type BatchVerifierServer interface {
	// VerifyBatch ...
	VerifyBatch(context.Context, *Batch) (*VerificationResponse, error)
	mustEmbedUnimplementedBatchVerifierServer()
}

// UnimplementedBatchVerifierServer must be embedded to have forward compatible implementations.
type UnimplementedBatchVerifierServer struct {
}

func (UnimplementedBatchVerifierServer) VerifyBatch(context.Context, *Batch) (*VerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyBatch not implemented")
}
func (UnimplementedBatchVerifierServer) mustEmbedUnimplementedBatchVerifierServer() {}

// UnsafeBatchVerifierServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BatchVerifierServer will
// result in compilation errors.
type UnsafeBatchVerifierServer interface {
	mustEmbedUnimplementedBatchVerifierServer()
}

func RegisterBatchVerifierServer(s grpc.ServiceRegistrar, srv BatchVerifierServer) {
	s.RegisterService(&BatchVerifier_ServiceDesc, srv)
}

func _BatchVerifier_VerifyBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Batch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchVerifierServer).VerifyBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatchVerifier_VerifyBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchVerifierServer).VerifyBatch(ctx, req.(*Batch))
	}
	return interceptor(ctx, in, info, handler)
}

// BatchVerifier_ServiceDesc is the grpc.ServiceDesc for BatchVerifier service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BatchVerifier_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sequencing.BatchVerifier",
	HandlerType: (*BatchVerifierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyBatch",
			Handler:    _BatchVerifier_VerifyBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sequencing.proto",
}
